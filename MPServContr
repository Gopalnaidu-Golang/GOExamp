package macropoint

import (
	"context"

	"go.uber.org/multierr"

	"thriftrw/code.uber.internal/data/schemas/basic/datatypes"

	"code.uber.internal/freight/uf-supply-locations/errors"
	"code.uber.internal/freight/uf-supply-locations/mapper"
	"code.uber.internal/freight/uf-supply-locations/model"
	"code.uber.internal/freight/uf-supply-locations/utils"
	unifeedmodel "code.uber.internal/freight/unifeed-client/model"
	"code.uber.internal/glue/framework.git/logger"
	"go.uber.org/zap"
)

// RegisterTracking -
func (c controller) RegisterTracking(ctx context.Context, event *unifeedmodel.UnifeedEvent) error {

	if event == nil {
		return errors.New(errors.ParamsError, "nil event received from unifeed")
	}

	jobUUID := event.EntityUUID
	if len(jobUUID) == 0 {
		return errors.New(errors.ParamsError, "empty JobUUID in unifeed event")
	}

	logger.FromContext(ctx).With(zap.String("job_uuid", jobUUID), zap.Any("event_noindex", event)).Info("received macropoint events")

	// Read macropoint order from MySQL
	order, err := c.macropointRepo.ReadbyjobUUID(ctx, jobUUID)
	if err != nil {
		if !errors.IsErrorType(err, errors.NotFoundError) {
			return err
		}
		order.JobUUID = jobUUID
	}

	logger.FromContext(ctx).With(zap.Any("job_uuid", jobUUID), zap.Any("read_order_noindex", order)).Info("after read order from table")

	updatedOrder := c.updateExistingOrderWithUnifeedEvent(event, order)
	err = c.saveOrderParamsToDB(ctx, jobUUID, updatedOrder)
	if err != nil {
		return err
	}

	if isEmptyValue(event) {
		logger.FromContext(ctx).With(zap.String("job_uuid", jobUUID),
			zap.String("event_type", event.EventType)).
			Info("received empty event from unifeed, returning")
		return nil
	}

	if utils.IsNilOrEmpty(order.OrderID) {
		logger.FromContext(ctx).With(zap.Any("job_uuid", jobUUID)).Info("order doesn't exist, will try to create one")
		return c.createOrder(ctx, updatedOrder)
	}

	if event.EventType == mapper.UnifeedEventTypeLoadCarrierUUID {
		logger.FromContext(ctx).With(zap.Any("job_uuid", jobUUID), zap.Stringp("order_id", order.OrderID)).Info("will stop and try to create order")
		if err = c.stopOrder(ctx, order); err != nil {
			return err
		}
		return c.createOrder(ctx, updatedOrder)
	}

	logger.FromContext(ctx).With(zap.Any("job_uuid", jobUUID), zap.Stringp("order_id", order.OrderID)).Info("will try to change order")
	return c.changeOrder(ctx, updatedOrder)
}

func (c controller) updateExistingOrderWithUnifeedEvent(
	event *unifeedmodel.UnifeedEvent,
	currentOrder model.MacropointOrder,
) model.MacropointOrder {
	if event.EventType == mapper.UnifeedEventTypeLoadCarrierUUID {
		currentOrder.CarrierUUID = &event.NewValue
		currentOrder.TruckNumber = utils.ZeroStrPtr
	} else if event.EventType == mapper.UnifeedEventTypeLoadTruckNumber {
		currentOrder.TruckNumber = &event.NewValue
	} else if event.EventType == mapper.UnifeedEventTypePickupBusinessFacility {
		currentOrder.PickupBusinessFacilityUUID = &event.NewValue
	} else if event.EventType == mapper.UnifeedEventTypeLoadScheduledSourceStartTime {
		if isEmptyValue(event) {
			currentOrder.PickupStartTime = &model.MacropointBlankTime
		} else {
			startTime, _ := mapper.UnifeedTimeStrToUTCTime(event.NewValue)
			currentOrder.PickupStartTime = &startTime
		}
	} else if event.EventType == mapper.UnifeedEventTypeLoadScheduledSourceEndTime {
		if isEmptyValue(event) {
			currentOrder.PickupEndTime = &model.MacropointBlankTime
		} else {
			endTime, _ := mapper.UnifeedTimeStrToUTCTime(event.NewValue)
			currentOrder.PickupEndTime = &endTime
		}
	} else if event.EventType == mapper.UnifeedEventTypeDropoffBusinessFacility {
		currentOrder.DropoffBusinessFacilityUUID = &event.NewValue
	} else if event.EventType == mapper.UnifeedEventTypeLoadScheduledDestinationStartTime {
		if isEmptyValue(event) {
			currentOrder.DropoffStartTime = &model.MacropointBlankTime
		} else {
			dropOffStartTime, _ := mapper.UnifeedTimeStrToUTCTime(event.NewValue)
			currentOrder.DropoffStartTime = &dropOffStartTime
		}
	} else if event.EventType == mapper.UnifeedEventTypeLoadScheduledDestinationEndTime {
		if isEmptyValue(event) {
			currentOrder.DropoffEndTime = &model.MacropointBlankTime
		} else {
			dropOffEndTime, _ := mapper.UnifeedTimeStrToUTCTime(event.NewValue)
			currentOrder.DropoffEndTime = &dropOffEndTime
		}
	}
	return currentOrder
}

func (c *controller) saveOrderParamsToDB(ctx context.Context, jobUUID string, order model.MacropointOrder) error {
	err := c.macropointRepo.CreateOrUpdateOrder(ctx, jobUUID, &order)
	if err != nil {
		logger.FromContext(ctx).
			With(zap.String("job_uuid", jobUUID),
				zap.Error(err)).
			Error("error writing macropoint order data to MySQL")
		return err
	}
	return nil
}

func (c *controller) isMacroPointEligible(ctx context.Context, params model.MacropointOrder) (bool, error) {
	hasAllData := !utils.IsNilOrEmpty(params.CarrierUUID) &&
		!utils.IsNilOrEmpty(params.TruckNumber) &&
		!utils.IsNilOrEmpty(params.PickupBusinessFacilityUUID) &&
		!utils.IsNilOrEmpty(params.DropoffBusinessFacilityUUID) &&
		params.PickupStartTime != nil &&
		utils.TimeFromPointer(params.PickupStartTime) != model.MacropointZeroTime &&
		params.PickupEndTime != nil &&
		utils.TimeFromPointer(params.PickupEndTime) != model.MacropointZeroTime &&
		params.DropoffStartTime != nil &&
		utils.TimeFromPointer(params.DropoffStartTime) != model.MacropointZeroTime &&
		params.DropoffEndTime != nil &&
		utils.TimeFromPointer(params.DropoffEndTime) != model.MacropointZeroTime

	if !hasAllData {
		logger.FromContext(ctx).With(zap.Any("params_noindex", params)).Info("missing fields to make request to macropoint")
		return false, nil
	}

	isCarrierParterned, err := c.isCarrierPartnered(ctx, params)
	if err != nil {
		logger.FromContext(ctx).With(zap.Error(err)).Error("Failed to determine ff carrier is parterned")
		return false, err
	}

	logger.FromContext(ctx).With(zap.Any("params_noindex", params),
		zap.Bool("hasAllData", hasAllData),
		zap.Bool("isCarrierPartnered", isCarrierParterned)).Info("macropoint order eligibility")
	return hasAllData && isCarrierParterned, nil
}

func isEmptyValue(event *unifeedmodel.UnifeedEvent) bool {
	return len(event.NewValue) == 0
}

func (c *controller) isCarrierPartnered(ctx context.Context, params model.MacropointOrder) (bool, error) {

	dotNumber, err := c.getDotNumber(ctx, utils.StringFromPointer(params.CarrierUUID))
	if err != nil || len(dotNumber) == 0 {
		logger.FromContext(ctx).With(zap.Error(err),
			zap.Stringp("carrier_uuid", params.CarrierUUID)).
			Error("Failed to get DotNumber")
		return false, err
	}

	res, err := c.macropointGateway.GoodTruck(ctx, dotNumber)
	if err != nil {
		logger.FromContext(ctx).With(zap.Error(err),
			zap.Stringp("carrier_uuid", params.CarrierUUID),
			zap.String("dot_number", dotNumber)).
			Error("Failed to get GoodTruck response")
		return false, err
	}

	if utils.StringToBool(res.PartnerStatus.Partnered) {
		var multiErr error
		carrierName := res.PartnerStatus.AccountName
		for _, connectionMethod := range res.PartnerStatus.ConnectionMethods.ConnectionMethod {
			var vehicles []string
			for _, equipmentIdentifier := range connectionMethod.EquipmentIdentifierList.EquipmentIdentifier {
				logger.FromContext(ctx).With(zap.String("carrier_name", carrierName),
					zap.Stringp("carrier_uuid", params.CarrierUUID),
					zap.String("dot_number", dotNumber),
					zap.Any("vehicles", vehicles)).
					Info("persisting vehicles to DB")
				vehicles = append(vehicles, equipmentIdentifier.Identifier)
			}

			err = c.UpdateCarrierTruckMapping(ctx, carrierName, *params.CarrierUUID, dotNumber, vehicles)
			multiErr = multierr.Append(multiErr, err)
		}
		return true, multiErr
	}

	return false, nil
}

func (c *controller) getDotNumber(ctx context.Context, carrierUUID string) (string, error) {
	dotNumber := ""
	dotNumberPtr, err := c.ufoGateway.FetchDotNumber(ctx, carrierUUID)
	if err != nil {
		return dotNumber, err
	}
	if dotNumberPtr != nil {
		dotNumber = *dotNumberPtr
	}

	return dotNumber, nil
}

func (c controller) createOrder(ctx context.Context, order model.MacropointOrder) error {
	eligible, err := c.isMacroPointEligible(ctx, order)
	if err != nil || !eligible {
		return err
	}

	req, err := c.getOrderRequest(ctx, order)
	if err != nil {
		return errors.Wrapf(errors.InternalError, err, "failed to create macropoint order request")
	}

	response, err := c.macropointGateway.CreateOrder(ctx, req)
	if err != nil {
		return errors.Wrapf(errors.InternalError, err, "failed to get response from macropoint createOrder gateway")
	}

	order.OrderID = &response.OrderID
	order.TrackingRequestID = &response.TrackingRequestID

	return c.saveOrderParamsToDB(ctx, order.JobUUID, order)
}

func (c *controller) getOrderRequest(
	ctx context.Context,
	order model.MacropointOrder) (model.MacropointOrderRequest, error) {

	createOrderRequest := model.MacropointOrderRequest{}

	// Add start track time
	startTrackTime := order.PickupStartTime.Add(model.StartTimeOffset)
	createOrderRequest.TrackStartDateTime = mapper.DateTimeToMacropointTimestamp(startTrackTime)

	// Read job data to get LoadID and equipment type
	job, err := c.ufjobGateway.ReadJob(ctx, order.JobUUID)
	if err != nil {
		return model.MacropointOrderRequest{}, err
	}

	trackingDuration := order.DropoffEndTime.Sub(*order.PickupStartTime) + model.TrackDurationOffset
	createOrderRequest.Notifications = model.Notifications{
		Notification: model.Notification{
			PartnerMPID:            model.PartnerMPID,
			IDNumber:               job.Identifier,
			TrackDurationInHours:   int(trackingDuration.Hours()),
			TrackIntervalInMinutes: model.TrackIntervalInMinutes,
		},
	}

	// Set vehicle type, default to DryVan
	vehicleType := model.VehicleTypeDryVan
	if job.Requirements != nil && job.Requirements.EquipmentRequirements != nil && job.Requirements.EquipmentRequirements.Equipment != nil {
		vehicleType = mapper.EquipmentTypeToVehicleType(job.Requirements.EquipmentRequirements.Equipment.Type)
	}
	createOrderRequest.Vehicle = model.VehicleData{VehicleType: vehicleType}

	// TODO: Read full carrier info, preferably from Freight Search
	dotNumber, err := c.getDotNumber(ctx, *order.CarrierUUID)
	if err != nil {
		return model.MacropointOrderRequest{}, err
	}
	createOrderRequest.Carrier = mapper.CarrierToCarrierData(dotNumber, dotNumber)

	// Pickup facility
	pickupAddr, err := c.facilityController.FetchBusinessFacilityAddr(ctx, datatypes.UUID(*order.PickupBusinessFacilityUUID))
	if err != nil {
		return model.MacropointOrderRequest{}, err
	}

	// Dropoff facility
	dropAddr, err := c.facilityController.FetchBusinessFacilityAddr(ctx, datatypes.UUID(*order.DropoffBusinessFacilityUUID))
	if err != nil {
		return model.MacropointOrderRequest{}, err
	}

	createOrderRequest.TripSheet = model.TripSheetData{
		Stops: model.StopsData{
			Stop: []model.StopData{
				{
					StopName:      model.STOP1,
					StopType:      model.PickupStopType,
					StopID:        model.ONE,
					Address:       mapper.AddressToStopAddress(*pickupAddr),
					StartDateTime: mapper.DateTimeToMacropointTimestamp(*order.PickupStartTime),
					EndDateTime:   mapper.DateTimeToMacropointTimestamp(*order.PickupEndTime),
				},
				{
					StopName:      model.STOP2,
					StopType:      model.DropoffStopType,
					StopID:        model.TWO,
					Address:       mapper.AddressToStopAddress(*dropAddr),
					StartDateTime: mapper.DateTimeToMacropointTimestamp(*order.DropoffStartTime),
					EndDateTime:   mapper.DateTimeToMacropointTimestamp(*order.DropoffEndTime),
				},
			},
		},
	}

	createOrderRequest.TrackVia = model.TrackViaData{
		Number: model.Number{
			Type:        "VehicleID",
			AssetNumber: *order.TruckNumber,
		},
	}

	return createOrderRequest, nil
}

func (c controller) changeOrder(ctx context.Context, order model.MacropointOrder) error {
	eligible, err := c.isMacroPointEligible(ctx, order)
	if err != nil || !eligible {
		return err
	}

	req, err := c.getOrderRequest(ctx, order)
	if err != nil {
		return errors.Wrapf(errors.InternalError, err, "failed to create macropoint order request")
	}

	_, err = c.macropointGateway.ChangeOrder(ctx, *order.OrderID, req)
	if err != nil {
		return errors.Wrapf(errors.InternalError, err, "failed to get response from macropoint ChangeOrder gateway")
	}

	return c.saveOrderParamsToDB(ctx, order.JobUUID, order)
}

func (c controller) stopOrder(ctx context.Context, order model.MacropointOrder) error {
	err := c.macropointGateway.StopOrder(ctx, *order.OrderID)
	if err != nil {
		return errors.Wrapf(errors.InternalError, err, "failed to get response from macropoint StopOrder gateway")
	}

	order.OrderID = utils.ZeroStrPtr
	order.TrackingRequestID = utils.ZeroStrPtr

	return c.saveOrderParamsToDB(ctx, order.JobUUID, order)
}
